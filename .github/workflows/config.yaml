name: Selenium Automation

on:
  push:
    branches:
      - sanity_branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Set up Chrome
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install google-chrome-stable
      #     # Add Chrome to the PATH
      #     echo 'export PATH="$PATH:/usr/bin"' >> $GITHUB_ENV

      # - name: Set up ChromeDriver
      #   run: |
      #     LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
      #     wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
      #     unzip chromedriver_linux64.zip
      #     sudo mv chromedriver /usr/bin/chromedriver
      #     sudo chown root:root /usr/bin/chromedriver
      #     sudo chmod +x /usr/bin/chromedriver

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x # Choose the appropriate Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # If you have a requirements file

      # - name: Print PATH
      #   run: |
      #     echo "PATH is $PATH"

      # - name: Verify Chrome Binary Location
      #   run: which google-chrome-stable

      # - name: Kill Chrome Processes (if running)
      #   run: |
      #     set +e  # Continue on error
      #     if pgrep "google-chrome-stable" > /dev/null; then
      #       pkill -f "google-chrome-stable" || true
      #     else
      #       echo "Chrome is not running, so no processes were killed."
      #     fi
      #     set -e  # Exit on error

      - name: Create Reports Directory
        run: |
          python -c "import os; os.makedirs('reports', exist_ok=True)"

      - name: Run Selenium tests with Firefox
        env:
          BASE_URL: base_url
          FILES: one
          SANITY: 'False'

        run: |
          echo "PATH: $PATH"
          echo "BASE_URL: $BASE_URL"
          if [ "$SANITY" == "True" ]; then
            pytest -k $FILES --html=reports/report.html --$BASE_URL
          else
            pytest -k $FILES --html=reports/report.html
          fi

      - name: Upload Reports as Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: reports
