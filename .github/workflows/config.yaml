name: Selenium Automation

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Set up Chrome
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install google-chrome-stable
      #     # Add Chrome to the PATH
      #     echo 'export PATH="$PATH:/usr/bin"' >> $GITHUB_ENV

      # - name: Set up ChromeDriver
      #   run: |
      #     LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
      #     wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
      #     unzip chromedriver_linux64.zip
      #     sudo mv chromedriver /usr/bin/chromedriver
      #     sudo chown root:root /usr/bin/chromedriver
      #     sudo chmod +x /usr/bin/chromedriver

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x # Choose the appropriate Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # If you have a requirements file

      # - name: Print PATH
      #   run: |
      #     echo "PATH is $PATH"

      # - name: Verify Chrome Binary Location
      #   run: which google-chrome-stable

      # - name: Kill Chrome Processes (if running)
      #   run: |
      #     set +e  # Continue on error
      #     if pgrep "google-chrome-stable" > /dev/null; then
      #       pkill -f "google-chrome-stable" || true
      #     else
      #       echo "Chrome is not running, so no processes were killed."
      #     fi
      #     set -e  # Exit on error

      - name: Create Reports Directory
        run: |
          python -c "import os; os.makedirs('reports', exist_ok=True)"

      - name: Run Selenium tests with Firefox
        env:
          BASE_URL: 'base_url'
          SANITY: 'False'
          FILES: 'one'

        run: |
          if [ "$SANITY" == "True" ]; then
            pytest -k $FILES --sanity --html=reports/report.html --base_url=$BASE_URL
          else
            pytest -k test --html=reports/report.html --base_url=$BASE_URL
          fi

      - name: Upload Reports as Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: reports



# name: Selenium Automation

# on:
#   push:
#     branches:
#       - sanity_branch

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Firefox
#         run: |
#           sudo apt-get update
#           sudo apt-get install firefox
#           # Add Firefox to the PATH
#           echo 'export PATH="$PATH:/snap/bin/firefox"' >> $GITHUB_ENV

#       - name: Set up GeckoDriver
#         run: |
#           GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r .tag_name)
#           wget https://github.com/mozilla/geckodriver/releases/download/$GECKO_VERSION/geckodriver-$GECKO_VERSION-linux64.tar.gz
#           tar -xzf geckodriver-$GECKO_VERSION-linux64.tar.gz
#           sudo mv geckodriver /usr/bin/geckodriver
#           sudo chown root:root /usr/bin/geckodriver
#           sudo chmod +x /usr/bin/geckodriver

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.x # Choose the appropriate Python version

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt  # If you have a requirements file

#       - name: Print PATH
#         run: |
#           echo "PATH is $PATH"

#       # - name: Verify Firefox Binary Location
#       #   run: which firefox

#       # - name: Kill Firefox Processes (if running)
#       #   run: |
#       #     set +e  # Continue on error
#       #     if pgrep "firefox" > /dev/null; then
#       #       pkill -f "firefox" || true
#       #     else
#       #       echo "Firefox is not running, so no processes were killed."
#       #     fi
#       #     set -e  # Exit on error

#       - name: Create Reports Directory
#         run: |
#           python -c "import os; os.makedirs('reports', exist_ok=True)"

#       - name: Run Selenium tests with Firefox
#         env:
#           PATH: ${{ secrets.PATH }}
#           BASE_URL: ${{ secrets.BASE_URL }}
#           GOOGLEUSERNAME: ${{ secrets.GOOGLEUSERNAME }}
#           SECOND_USER_NAME: ${{ secrets.SECOND_USER_NAME }}
#           THIRD_USER_NAME: ${{ secrets.THIRD_USER_NAME }}
#           FOURTH_USER_NAME: ${{ secrets.FOURTH_USER_NAME }}
#           LINKEDIN_USERNAME: ${{ secrets.LINKEDIN_USERNAME }}
#           PASSWORD: ${{ secrets.PASSWORD }}
#           SECOND_PASSWORD: ${{ secrets.SECOND_PASSWORD }}
#           THIRD_PASSWORD: ${{ secrets.THIRD_PASSWORD }}
#           FOURTH_PASSWORD: ${{ secrets.FOURTH_PASSWORD }}
#           GOOGLEPASSWORD: ${{ secrets.GOOGLEPASSWORD }}
#           LINKEDINPASSWORD: ${{ secrets.LINKEDINPASSWORD }}
#           PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
#           SECOND_PROJECT_NAME: ${{ secrets.SECOND_PROJECT_NAME }}

#         run: |
#           pytest -k test --html=reports/report.html

#       - name: Upload Reports as Artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: test-reports
#           path: reports
